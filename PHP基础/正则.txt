限定符

*  匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。
+  匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。
?  匹配前面的子表达式零次或一次。要匹配 ? 字符，请使用 \?。 (前导字符不可更改，否则不配)
.  匹配任意字符
.* 表示任意前导字符,并且零次或多次
{x}匹配任何包含x个前导字符串
{x,y}匹配任何包含x到y个前导字符串
{x,}匹配任何包含至少x个前导字符串
$  匹配字符串的行尾
^  匹配字符串的行首
|  匹配字符串的左边或者右边

元字符

[a-z]   匹配任何包含小写字母a-z的字符串
[A-Z]   匹配任何包含大写字母A-Z的字符串
[0-9]   匹配任何包含数字0-9的字符串
[abc]   匹配任何包含小写字母a、b、c的字符串
[^abc]  匹配任何不包含小写字母a、b、c的字符串
[a-zA-Z0-9_]    匹配任何包含a-zA-Z0-9和下划线的字符串
\w      匹配任何包含a-zA-Z0-9和下划线的字符串 等价于 [a-zA-Z0-9_]
\W      匹配任何没有下划线和字母数字的字符串
\d      匹配任何数字字符串,和 [0-9] 相同
\D      匹配任何非数字字符串,和 [^0-9] 相同
\s      匹配任何空白字符
\S      匹配任何非空白字符
\b      匹配是否到达单词边界
\B      匹配是否没有到达单词边界

修饰符 写在 // 的外面

i       不区分大小写
x       忽略正则中的空白
A       强制从头开始匹配

风格函数

preg_grep()函数搜索数组中的所有元素,返回由与某个模式匹配的所有元素组成的数组

    $language = array('php','asp','java','pyphon','js');
    $patten = '/p$/';
    print_r(preg_grep($patten,$language)); //Array ( [0] => php [1] => asp )

preg_match()函数在字符串中搜索模式,如果存在则返回true,否则返回false
    echo preg_match('/php[1-6]/','php6');//1

    $patten = '/([\w\.]{2,255})@([\w-]{1,255}).([a-z]{2,4})/';
        $subject  = 'yc60.com@gmail.com';
        if(preg_match($patten,$subject)){
            echo '邮箱合法';
        }else{
            echo '邮箱不合法';
        }

preg_match_all() 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。
     echo preg_match_all('/php[1-6]/','php5dfkjdfkphp6sdhjphp3');//3

     preg_match_all('/php[1-6]/','php5dfkjdfkphp6sdhjphp3',$out);
     print_r($out); // Array ( [0] => Array ( [0] => php5 [1] => php6 [2] => php3 ) )

preg_quote()需要参数 str 并向其中 每个正则表达式语法中的字符前增加一个反斜线。
     echo preg_quote('php is $100');//php is \$100

preg_replace()搜索到所有匹配,然后替换成想要的字符串返回出来
    preg_replace (正则表达式, 替换成, 字符串, 最大替换次数【默认-1，无数次】, 替换次数)
    echo preg_replace('/php[1-6]/','python','this is php4,this is php5'); //this is python,this is python


     $patten = '/(\[b\])(.*)(\[\/b\])/U'; //U 禁止贪婪
     $replace = '<strong>\2</strong>';

     $string = 'this is [b]php5[/b],this is [b]php4[/b]';

     echo preg_replace($patten,$replace,$string);

preg_split — 通过一个正则表达式分隔字符串

         print_r(preg_split('/[\.@]/','yc60.com@gmail.com'));//Array ( [0] => yc60 [1] => com [2] => gmail [3] => com )




