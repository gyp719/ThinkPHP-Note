each 返回数组中当前的键／值对并将数组指针向前移动一步 

each 这个函数返回的是一个数组
each 将第一个键值对获取到，然后包装成一个新数组。


举例：
$userAges = array('陈武'=> 20,'赵广帅'=>26,'马云'=>54);

$arr = each($userAges);
print_r($arr);


$arr = each($userAges);
print_r($arr[0]);//赵广帅

输出值：Array ( [1] => 20 [value] => 20 [0] => 陈武 [key] => 陈武 )

	print_r($arr[0]);//陈武


	print_r($arr['key'])//陈武




！！ 两个感叹号，表示真实存在的数据转换成布尔值  (注意)

$userAges = array('陈武'=> 20,'赵广帅'=>26,'马云'=>54);

while(!!$a=each($userAges)){
        echo $a['key'].'---'.$a['value'].'<br/>';
}

返回值：陈武---20
	赵广帅---26
	马云---54


------------------------------------------------------------------------
list  把数组中的值赋给一些变量 
list  只能认识key为数字的，自定义的字符串key是无法使用list来识别的


$a = array('aaa','bbb','ccc','ddd');


    list($var1,$var2,$var3,$var4) = $a;

    echo $var4;//ddd


//不能使用list循环  ，下标只能是数字
 $userAges = array('陈武'=> 20,'赵广帅'=>26,'马云'=>54);


list 和 each 并用 

$userAges = array('陈武'=> 20,'赵广帅'=>26,'马云'=>54);


    list($name,$age) = each($userAges);
    echo $name; //陈武
    echo $age;	//20



reset 将数组的内部指针指向第一个单元  （重置）



array_unique -- 移除数组中重复的值

举例:$userAges = array('陈武'=> 20,'赵广帅'=>26,'马云'=>54,'王健林'=>54);
	print_r(array_unique($userAges));

返回值： Array ( [陈武] => 20 [赵广帅] => 26 [马云] => 54 )


array_flip -- 交换数组中的键和值


$userAges = array('陈武'=> 20,'赵广帅'=>26,'马云'=>54,'王健林'=>54);

print_r(array_flip($userAges));//Array ( [20] => 陈武 [26] => 赵广帅 [54] => 王健林 )  交换键值


多维数组 循环遍历(2种方法)
举例：
$products = array(
        array('产品名称'=>'苹果','数量'=>6,'价格'=>28.8),
        array('产品名称'=>'猪肉','数量'=>2,'价格'=>32.1),
        array('产品名称'=>'饼干','数量'=>3,'价格'=>45.3),
    );
	
	①for($i=0;$i<count($products);$i++){
        foreach($products[$i] as $k=>$v){
            echo $k.'---'.$v.'|';
        }
        echo '<br/>';
    }
	
	②for($i=0;$i<count($products);$i++){
        while(!!list($key,$value) = each($products[$i])){
            echo $key.'---'.$value.'|';
        }
        echo '<br/>';
    }
	
	
数组的排序
	
	sort — 对数组排序 ,返回值 是布尔值,排序成功返回 1  
			按数组的值 排序 ，对中文也有效
			
举例：
	$fruit = array('banner','orange','apple');
	sort($fruit);
	print_r($fruit);//	Array ( [0] => apple [1] => banner [2] => orange )
	
	
	$names = array('马云','李彦宏','高易平');
	sort($names);
    print_r($names);//	Array ( [0] => 李彦宏 [1] => 马云 [2] => 高易平 )
	
对数字升序 排序
	$nums = array(134,1,34,35,45,653,343,335);
	sort($nums);
	print_r($nums);// Array ( [0] => 1 [1] => 34 [2] => 35 [3] => 45 [4] => 134 [5] => 335 [6] => 343 [7] => 653 )
	
	
 $numbers = array('2','12');
	sort($numbers,SORT_NUMERIC); //作为数字比较
    print_r($numbers); // Array ( [0] => 2 [1] => 12 )
	
	
	sort($numbers,SORT_STRING); //作为字符串比较
    print_r($numbers);	// Array ( [0] => 12 [1] => 2 )
	
	
arsort — 对数组进行排序并保持索引关系 

 $fruit = array('banner','orange','apple');
    asort($fruit); //保留原始数字的下标

    print_r($fruit); // Array ( [2] => apple [0] => banner [1] => orange )
	
	
krsort — 对数组按照键名排序

$fruit = array('c'=>'banner','a'=>'orange','b'=>'apple');
    ksort($fruit); 按照下标进行排序
	
    print_r($fruit); //Array ( [a] => orange [b] => apple [c] => banner )

实现反向排序  加上 r 
	rsort()	arsort() krsort();
	
随机打乱数组 	shuffle()


    $pic = array('1.jpg','2.jpg','3.jpg','4.jpg','5.jpg','6.jpg');

    //数组随机打乱
    shuffle($pic);
	print_r($pic);
	
array_reverse — 返回原来数组的反向排序
	

