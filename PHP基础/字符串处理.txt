trim — 去除字符串首尾处的空白字符（或者其他字符）
nl2br — 在字符串所有新行之前插入 <br/> 换行标记
    举例：
    $str = "this is a teacher\nthis is a student";
        echo $str; // this is a teacher this is a student
        echo nl2br($str); //this is a teacher
                            this is a student

htmlentities htmlspecialchars 将所有字符转换成 HTML 字符串
    举例：
    $str = "<strong>学习PHP</strong>";
    echo htmlspecialchars($str);//<strong>学习PHP</strong>

strip_tags — 从字符串中去除 HTML 和 PHP 标记
    举例：
    $str = "<strong>学习PHP</strong>";
    echo strip_tags($str);//学习PHP

addcslashes — 使用反斜线转义字符串中的字符

strtoupper — 将字符串转化为大写
     echo strtoupper('www.baidu.com');//WWW.BAIDU.COM

strtolower — 将字符串转化为小写
ucfirst — 将字符串的首字母转换为大写
ucwords — 将字符串中每个单词的首字母转换为大写

str_pad — 使用另一个字符串填充字符串为指定长度
    举例：
    $input = "Alien";
        echo str_pad($input, 10);                      // 输出 "Alien     "
        echo str_pad($input, 10, "-=", STR_PAD_LEFT);  // 输出 "-=-=-Alien"
        echo str_pad($input, 10, "_", STR_PAD_BOTH);   // 输出 "__Alien___"
        echo str_pad($input, 6 , "___");               // 输出 "Alien_"

explode — 使用一个字符串分割另一个字符串  返回数组
    第一个参数是分割字符串，第二个字符串是要被分割的字符串

    举例：
    $array = explode('@','gyp@163.com');
    print_r($array); // Array ( [0] => gyp [1] => 163.com )

implode — 将一个一维数组的值转化为字符串
    举例：
    $array = explode('@','gyp@163.com');
    $str = implode('@',$array);
    echo $str; // gyp@163.com

strtok — 标记分割字符串

    $str = 'I ,will . be # back';
        $tok = strtok($str,',.#');

        while($tok){
            echo $tok.'<br/>';
            $tok = strtok(',.#');
        }

    返回值：I
          will
          be
          back

substr() 函数返回字符串的一部分。substr(string,start,length)

str_split — 将字符串转换为数组  (不太适合中文)
     $str = 'this is a PHP';
        print_r(str_split($str));

返回值：
        Array
        (
            [0] => t
            [1] => h
            [2] => i
            [3] => s
            [4] =>
            [5] => i
            [6] => s
            [7] =>
            [8] => a
            [9] =>
            [10] => P
            [11] => H
            [12] => P
        )

strrev — 反转字符串

strcmp  字符串的比较

    if(strcmp('b','b') == 0){
            echo '==';
        }

strcasecmp 比较字符串（不区分大小写）
返回值：如果 str1 小于 str2 返回 < 0； 如果 str1 大于 str2 返回 > 0；如果两者相等，返回 0。

if(strcmp('B','b') == 0){
            echo '==';
        }

strnatcmp — 使用自然排序算法比较字符串
如果 str1 小于 str2 返回 < 0； 如果 str1 大于 str2 返回 > 0；如果两者相等，返回 0。

echo strnatcmp('2','10');//-1

strspn 找出某字符串落在另一字符串遮罩的数目
    后面两个数字的参数，是从第几位开始，取多少位
    echo strspn('gy79','gyp719@163.com',1,3);//3

strlen — 获取字符串长度
    echo strlen('this is a teacher');//17

substr_count — 计算字串出现的次数
    echo substr_count('gyp719@163.com','1');//2

strstr — 查找字符串的首次出现
    返回从第一次出现的位置到结尾的字符串
    echo strstr('gyp719@163.com',"@");//@163.com

stristr — strstr() 函数的忽略大小写版本

strpos — 查找字符串首次出现的位置  从0开始
    echo strpos('gyp719@163.com','p');//2

strrpos — 计算指定字符串在目标字符串中最后一次出现的位置

str_replace — 子字符串替换

    第一个参数表示要查找的字符串
    第二个参数表示要替换的字符串
    第三个参数表示原来的被替换的完整字符串

    echo str_replace('lee','wuqi','this is a lee');

substr_replace — 替换字符串的子串

//从第一个位置开始(参数3)，取出5个来(参数4)，将它替换成&&&(参数2)
    echo substr_replace('gyp719@163.com','&&&',0,5); //&&&9@163.com

处理中文字符
mb_strlen — 获取字符串的长度

    $str = '我是吴起';
    echo strlen($str);//12
    echo mb_strlen($str,'utf-8');//4

mb_substr — 获取字符串的部分
    $str = '我是吴起';
    echo mb_substr($str,0,2,'utf-8'); // 我是

mb_strpos — 查找字符串在另一个字符串中首次出现的位置
     $str = '我是吴起';
      echo mb_strpos($str,'是',0,'utf-8'); // 1

mb_substr_count — 统计字符串出现的次数  可以不需要字符编码
    $str = '我是吴起是是是';
    echo mb_substr_count($str,'是','utf-8');
